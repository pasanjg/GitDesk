# name: CI

# on:
#   push:
#     branches:
#       - master
#     tags:
#       - v[0-9]+.[0-9]+.[0-9]+
#       - v[0-9]+.[0-9]+.[0-9]+-alpha*
#       - v[0-9]+.[0-9]+.[0-9]+-beta*

# jobs:
#   build:
#     name: Build Electron
#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         os: [ubuntu-latest, windows-latest, macOS-latest]

#     steps:
#       - name: GitHub Context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: echo "$GITHUB_CONTEXT"
#       - uses: actions/checkout@v1
#         with:
#           fetch-depth: 1

#       - name: Use Node.js 10.x
#         uses: actions/setup-node@v1
#         with:
#           node-version: 10.x

#       - name: Install Dependencies
#         run: |
#           npm install

#       - name: Build App Source
#         run: |
#           npm run build

#       - name: Cleanup Artifacts
#         if: matrix.os != 'windows-latest'
#         run: |
#           mkdir artifacts
#           mv dist/*.deb artifacts || true
#           mv dist/*.AppImage artifacts || true
#           mv dist/*.dmg artifacts || true

#       - name: Cleanup Artifacts WINDOWS
#         if: matrix.os == 'windows-latest'
#         run: |
#           mkdir artifacts
#           move dist\*exe artifacts

#       # - name: Upload Artifacts
#       #   uses: actions/upload-artifact@v1
#       #   if: startsWith(github.ref, 'refs/heads/master')
#       #   with:
#       #     name: ${{ matrix.os }}
#       #     path: artifacts

#       - name: Generate Release Version String
#         if: startsWith(github.ref, 'refs/tags/')
#         run: echo "::set-env name=VERSION_STR::${GITHUB_REF##*/}"

#       - name: Create Release
#         uses: ncipollo/release-action@v1
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           allowUpdates: true
#           artifacts: "artifacts/**"
#           name: Release ${{ env.VERSION_STR }}
#           prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') }}
#           tag: ${{ env.VERSION_STR }}
#           token: ${{ secrets.TOKEN }}
